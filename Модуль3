class  Node {
        int key;
        Node left;
        Node right;
        Node parent;


    }

    public class Formation {
    public static int h(Node x) {
        if (x==null)
            return -1;
        else
            return  Math.max(h(x.left),h(x.right)+1);

        }



        public static void main(String[] args) {
            int dataArray[] = {20, 18, 19, 15, 17, 16, 3, 25, 22, 27, 26, 28, 21, 23};
            Node root = null;

            Node z = new Node();
            z.key = dataArray[0];
            z.parent = null;
            root = insert(z, root);

            for (int i = 1; i < dataArray.length; i++) {
                z = new Node();
                z.key = dataArray[i];
                insert(z, root);

            }




            Node t = new Node();

balance(t,root);

            for (int i = 1; i < dataArray.length; i++) {
                t = search(root, dataArray[i]);
                try {
                    System.out.println("Значение баланса узла: " + getBalance(t));
                } catch (BalanceException e) {
                    System.out.println(e.getMessage());
                }


                System.out.println("Корень поддерева  " + t.key);
                System.out.println("Родитель: " + (t.parent != null ? t.parent.key : "null"));
                System.out.println("Левый : " + (t.left != null ? t.left.key : "null"));
                System.out.println("Правый : " + (t.right != null ? t.right.key : "null"));
                System.out.println("*************************************************************");
                }


            try {
                System.out.println(dataArray[16]);

            } catch (ArrayIndexOutOfBoundsException ex) {


            } finally {
                System.out.println("Блок finally");
            }
            System.out.println("Выход за пределы");

            try {
                int d = dataArray[3] / 0;
                System.out.println(d);
            } catch (ArithmeticException e) {
            } finally {
                System.out.println("Блок finally");
            }
            System.out.println("Деление на нуль ");
            try {
                String s = "привет";
                int i = Integer.parseInt(s);

                System.out.println("int = " + i);
            } catch (NumberFormatException fe) {
                System.out.println("Неверное преобразование строки.");
            }



            try {
                dataArray = null;
                int i = dataArray.length;
                System.out.println(i);
            } catch (NullPointerException ex) {
            } finally {
                System.out.println("Пустая ссылка");
            }
            try {
                throwOne(); // Метод выбрасывает исключение
            } catch (IllegalAccessException e) { // Обработка исключения
                System.out.println("Случилась неприятность: " + e);
            }

        }

        static void throwOne() throws IllegalAccessException{
            System.out.println("Ошибка в методе throwOne!");
            // Выбрасывание исключения(передать исключение вручную, используется throw):
            throw new IllegalAccessException("Большая ошибка!");}


        public static Node insert(Node z, Node x) {
            if (x == null) {
                x = z;
            } else if (z.key < x.key) {
                x.left = insert(z, x.left);
                x.left.parent = x;
            } else {
                x.right = insert(z, x.right);
                x.right.parent = x;
            }
            return x;
        }

        public static Node search(Node x, int k) {
            if ((x == null) || (k == x.key))
                return x;
            if (k < x.key)
                return search(x.left, k);
            else
                return search(x.right, k);
        }
        public static int getBalance(Node t) throws BalanceException{

            int result= h(t.left)-h(t.right);// формула для высчитывания баланса
            if(result>1) throw new BalanceException("Число больше 1 , оно равно :"+result,result);

            return result;



        }
        public static int balance(Node z,Node x){
            int b=h(z.left)-h(z.right);
            try {
                if (b>1) throw new Exception("Значение баланса узла, большее 1:"); }
            catch (Exception ex) {
                System.out.println(ex.getMessage());
                System.out.println(b);
            }
            return b;
        }

    }


 class BalanceException extends Exception {
    private int balance;

    public int getBalance() {
        return balance;
    }

    public BalanceException(String message, int x) {

        super(message);
        balance = x;

    }

}


